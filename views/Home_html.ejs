<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard</title>
    <!-- <link rel="stylesheet" href="Home.css" type="text/css"> -->
</head>

<style>
    body {
        margin: 0;
        font-family: Arial, sans-serif;
        background: linear-gradient(to bottom, #0481e0 50%, #FFFFFF 50%);
        color: #fff;
    }

    #sidebar {
        width: 15%;
        height: fit-content;
        background-color: #ffffff;
        position: fixed;
        display: flex;
        flex-direction: column;
        color: #000;
        align-items: center;
        justify-content: flex-start;
        border: .01em solid #000;
        padding-top: 1em;
        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        border-radius: 1em;
        margin: 1em;
    }

    #main {
        margin-left: 15%;
        padding: 20px;
    }

    #top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    #widgets {
        display: flex;
        justify-content: space-between;
        margin: 20px 0;
    }

    .widget {
        background-color: #fff;
        color: #000;
        width: 23%;
        height: 100px;
        border-radius: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    #chart,
    #scheduled-bells,
    #promo {
        background-color: #fff;
        color: #000;
        border-radius: 10px;
        margin: 20px 0;
        padding: 20px;
    }

    #chart {
        height: 20em;
        width: 40em;
        border: 0.01em solid #000;
        margin-right: 5px;
    }

    .imgRan {
        display: inline;
        position: absolute;
        left: 68%;
        top: 40%;
        border: 0.01em solid #000;
        border-radius: 0.85em;
        margin: 0;
        padding: 0;
    }

    #scheduled-bells table {
        width: 100%;
        margin-top: 0;
        border-collapse: collapse;
    }

    #scheduled-bells th,
    #scheduled-bells td {
        border: 1px solid #ddd;
        padding: 8px;
    }

    #promo {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    #promo button {
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
    }

    .dash-items {
        width: 99%;
        height: 3em;
        margin: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        /* border: 0.01em solid #000; */
        border-radius: 2em;
        cursor: pointer;
        background-color: #ffffff;
    }

    .btn-DB {
        border: none;
        border-radius: .5em;
        height: 3em;
        width: 10em;
    }

    #scheduled-bells {
        display: flex;
        flex-direction: column;
        align-items: center;
        row-gap: 1em;

        >#save-button {
            background-color: #007bff;
            color: #fff;
            border: none;
            padding: 1em;
            border-radius: 1em;
            cursor: pointer;
            font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        }

    }

    #prevData {
        position: relative;
        left: 0em;
        top: 0em;
        width: 40em;
    }

    /* Media query for screens from 300px and up */
    @media (min-width: 300px) {
        body {
            font-size: 1em;
            font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        }

        #sidebar {
            display: flex;
            flex-direction: row;
            flex-wrap: wrap;
            justify-content: flex-start;
            align-items: center;
            align-content: flex-start;
            width: 50%;
            height: auto;
            position: sticky;
            top: 0px;
            margin: 0;
            padding: 1em;
            column-gap: 1em;
        }

        #main {
            margin-left: 0;
            padding: 1em;
        }

        #top-bar {
            flex-direction: row;
            align-items: center;
        }

        #widgets {
            flex-direction: column;
        }

        .widget {
            width: 100%;
            margin-bottom: 1em;
            /* display: none; */
        }

        .dash-items {
            width: auto;
            height: auto;
            /* margin: 1em; */
        }
    }

    /* Media query for screens from 600px and up */
    @media (min-width: 600px) {
        body {
            font-size: 1em;
            font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        }

        #sidebar {
            width: 25%;
            height: 93vh;
            position: fixed;
            margin: 1em;
            padding-top: 2em;
        }

        #main {
            margin-left: 25%;
            padding: .5em;
        }

        #top-bar {
            flex-direction: row;
            align-items: center;
        }

        #widgets {
            flex-direction: row;
            justify-content: space-between;
        }

        .widget {
            width: 23%;
            margin-bottom: 0;
        }

        .dash-items {
            width: 100%;
            margin: 0;
        }
    }

    /* Media query for screens from 900px and up */
    @media (min-width: 900px) {
        body {
            font-size: 1em;
            font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
        }

        #sidebar {
            width: 15%;
        }

        #main {
            margin-left: 18em;
        }
    }
</style>


<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

<body>
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

    <div style="height: 93vh;width: fit-content; display: inline;">
        <div id="sidebar">
            <div class="dash-items">
                <button class="btn-DB" onclick="showDB()"
                    style="background-color: #ffffff; :hover { background-color:  #f6ebeb};display: flex; flex-direction: row; justify-content: center; align-items: center; cursor: pointer;">
                    <svg fill="#007bff" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg"
                        xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 489.5 489.5" xml:space="preserve"
                        stroke="1001100" height="24" width="24"
                        style=":hover{fill-opacity: .99; background-blend-mode:soft-light;}">
                        <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
                        <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                        <g id="SVGRepo_iconCarrier">
                            <g>
                                <g>
                                    <path
                                        d="M449.9,21.25H39.5C17.7,21.25,0,38.95,0,60.75v277.3c0,21.8,17.7,39.5,39.5,39.5h161v44.2h-31.4c-5.2,0-9.5,4.3-9.5,9.5 v27.5c0,5.2,4.3,9.5,9.5,9.5h151.3c5.2,0,9.5-4.3,9.5-9.5v-27.5c0-5.2-4.3-9.5-9.5-9.5H289v-44.1h161c21.8,0,39.5-17.7,39.5-39.5 V60.75C489.4,38.95,471.7,21.25,449.9,21.25z M435.5,323.35H53.9V75.15h381.7v248.2H435.5z">
                                    </path>
                                    <path
                                        d="M268.4,109.55h-47.3v180.1h47.3V109.55z M233.7,122.25H249l-15.3,15.3V122.25z M255.7,276.95h-15.4l15.4-15.4V276.95z M255.7,244.85l-22,22v-15.6l22-22V244.85z M255.7,212.55l-22,22v-15.6l22-22V212.55z M255.7,180.25l-22,22v-15.6l22-22V180.25z M255.7,147.85l-22,22v-15.6l22-22V147.85z">
                                    </path>
                                    <rect x="287.7" y="192.75" width="47.3" height="96.9" fill="grey"></rect>
                                    <path d="M201.7,153.45h-47.3v136.1h47.3V153.45z M189,276.95h-22v-110.8h22V276.95z">
                                    </path>
                                </g>
                            </g>
                        </g>
                    </svg> <span
                        style="text-align: left; margin: 1em; height: auto; width: auto; background-color: #ffffff; border-radius: .5em;">
                        Dashboard </button></span>
            </div>

            <div class="dash-items">
                <button class="btn-DB" onclick="showBells()"
                    style="background-color: #ffffff; :hover { background-color:  #fef7f7};display: flex; flex-direction: row; justify-content: center; align-items: center; cursor: pointer;">
                    <svg fill="pink" height="2em" width="2em" version="1.1" id="Layer_1"
                        xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                        viewBox="-30.72 -30.72 573.44 573.44" xml:space="preserve" stroke="yellow"
                        stroke-width="0.00512">
                        <g id="SVGRepo_bgCarrier" stroke-width="0">
                            <rect x="-30.72" y="-30.72" width="573.44" height="573.44" rx="286.72" fill="#ffff"
                                strokewidth="0">
                            </rect>
                        </g>
                        <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
                        <g id="SVGRepo_iconCarrier">
                            <g>
                                <g>
                                    <path
                                        d="M439.652,347.915v-97.48c0-85.797-59.14-158.031-138.794-178.101c3.34-6.707,5.229-14.258,5.229-22.246 C306.087,22.469,283.618,0,256,0c-27.618,0-50.087,22.469-50.087,50.087c0,7.988,1.889,15.539,5.229,22.246 c-79.654,20.07-138.794,92.305-138.794,178.101v97.48c-19.433,6.892-33.391,25.45-33.391,47.215 c0,27.618,22.469,50.087,50.087,50.087h85.158C181.957,483.275,215.686,512,256,512s74.042-28.725,81.799-66.783h85.158 c27.618,0,50.087-22.469,50.087-50.087C473.043,373.365,459.085,354.807,439.652,347.915z M256,33.391 c9.206,0,16.696,7.49,16.696,16.696S265.206,66.783,256,66.783c-9.206,0-16.696-7.49-16.696-16.696S246.794,33.391,256,33.391z M256,478.609c-21.766,0-40.323-14.07-47.215-33.503h94.431C296.323,464.539,277.766,478.609,256,478.609z M422.957,411.826 H89.044c-9.206,0-16.696-7.49-16.696-16.696s7.49-16.696,16.696-16.696h33.392c9.22,0,16.696-7.475,16.696-16.696 s-7.475-16.696-16.696-16.696h-16.697v-94.609c0-82.854,67.407-150.261,150.261-150.261s150.261,67.407,150.261,150.261v94.609 h-16.71c-9.22,0-16.696,7.475-16.696,16.696s7.475,16.696,16.696,16.696h33.406c9.206,0,16.696,7.49,16.696,16.696 S432.162,411.826,422.957,411.826z">
                                    </path>
                                </g>
                            </g>
                            <g>
                                <g>
                                    <path
                                        d="M256,133.565c-64.442,0-116.87,52.428-116.87,116.87c0,9.22,7.475,16.696,16.696,16.696s16.696-7.475,16.696-16.696 c0-46.03,37.448-83.478,83.478-83.478c9.22,0,16.696-7.475,16.696-16.696S265.22,133.565,256,133.565z">
                                    </path>
                                </g>
                            </g>
                        </g>
                    </svg> <span
                        style="text-align:left; margin: 1em; height: auto; width: auto; background-color: #ffffff; border-radius: .5em;">Smart
                        Bells </span></button>
            </div>

            <div class="dash-items">
                <button class="btn-DB" onclick="showIrrigation()"
                    style="background-color: #ffffff; :hover { background-color:  #ffffff};display: flex; flex-direction: row; justify-content: center; align-items: center; cursor: pointer;">

                    <svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg"
                        xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="-29.75 -29.75 357.00 357.00"
                        xml:space="preserve" width="3em" height="3em" fill="0adbd8" stroke="#0adbd8"
                        stroke-width="0.002975">
                        <g id="SVGRepo_bgCarrier" stroke-width="0" transform="translate(0,0), scale(1)">
                            <rect x="-29.75" y="-29.75" width="357.00" height="357.00" rx="178.5" fill="#ffffff"
                                strokewidth="0"></rect>
                        </g>
                        <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round" stroke="#CCCCCC"
                            stroke-width="0.595"></g>
                        <g id="SVGRepo_iconCarrier">
                            <g>
                                <g id="XMLID_34_">
                                    <g>
                                        <path style="fill:#BEBB5D;"
                                            d="M190.92,219.581v48.92h-84.34v-48.92h16.15c5.45,0,9.88-4.43,9.88-9.89v-29.15h32.29v29.15 c0,5.46,4.42,9.89,9.88,9.89H190.92z">
                                        </path>
                                        <rect x="106.58" y="141.501" style="fill:#86A090;" width="84.34" height="19.27">
                                        </rect>
                                        <path style="fill:#1E918A;"
                                            d="M40.43,122.021c0.51-0.06,1.01-0.11,1.5-0.15c-5.13,7.01-4.96,12.63-4.21,19.87l0.13,1.2 c0.33,3.37-0.96,4.76-1.96,5.51c-2.36,1.77-6.56,2.22-9.58,1.01c-4.81-1.92-7.16-7.4-5.24-12.21 C24.7,128.191,31.03,123.211,40.43,122.021z">
                                        </path>
                                        <path style="fill:#1E918A;"
                                            d="M56.16,81.181c-5.55-0.73-9.56,0.97-14.29,3.46l-0.86,0.45c-2.04,1.06-2.97,0.49-3.42,0.22 c-1.62-0.98-2.99-3.62-2.99-5.75c0-3.45,2.81-6.26,6.26-6.26C48.66,73.301,53.35,76.971,56.16,81.181z">
                                        </path>
                                        <path style="fill:#1E918A;"
                                            d="M84.57,25.461c7.26,6.53,9.75,14.2,7.62,23.43c-0.12,0.5-0.24,0.98-0.38,1.46 c-4.81-7.23-10.15-9.01-17.2-10.81l-1.17-0.3c-3.27-0.84-4.13-2.54-4.49-3.73c-0.85-2.83,0.19-6.93,2.36-9.35 c1.85-2.06,4.41-3.1,6.99-3.1C80.53,23.061,82.78,23.851,84.57,25.461z">
                                        </path>
                                        <path style="fill:#1E918A;"
                                            d="M254.65,135.731c3.03,1.12,4.59,4.49,3.48,7.53c-2.5,6.78-7.13,9.82-11.7,11.04 c2.32-4.68,2.1-8.83,1.44-13.87l-0.12-0.94c-0.27-2.1,0.49-2.7,0.86-3c0.9-0.72,2.39-1.12,3.84-1.12 C253.23,135.371,253.99,135.491,254.65,135.731z">
                                        </path>
                                        <path style="fill:#1E918A;"
                                            d="M244.94,77.481c1.8,2.71,2.24,6.92,0.99,9.59c-0.53,1.13-1.62,2.68-4.99,3.05l-1.2,0.12 c-7.26,0.77-12.82,1.77-18.65,8.3c-0.94-7.47,0.57-16.83,10.83-23.66c2.08-1.39,4.58-1.89,7.05-1.4 C241.43,73.971,243.55,75.401,244.94,77.481z">
                                        </path>
                                        <path
                                            d="M287.37,268.501c5.46,0,9.88,4.42,9.88,9.88c0,5.46-4.42,9.89-9.88,9.89H10.14c-5.46,0-9.89-4.43-9.89-9.89 c0-5.46,4.43-9.88,9.89-9.88h76.68v-58.81c0-5.46,4.42-9.88,9.88-9.88h16.14v-19.27H96.7c-5.46,0-9.88-4.43-9.88-9.89v-39.04 c0-5.46,4.42-9.88,9.88-9.88h104.11c5.45,0,9.88,4.42,9.88,9.88v39.04c0,5.46-4.43,9.89-9.88,9.89h-16.15v19.27h16.15 c5.45,0,9.88,4.42,9.88,9.88v58.81H287.37z M190.92,268.501v-48.92h-16.14c-5.46,0-9.88-4.43-9.88-9.89v-29.15h-32.29v29.15 c0,5.46-4.43,9.89-9.88,9.89h-16.15v48.92H190.92z M190.92,160.771v-19.27h-84.34v19.27H190.92z">
                                        </path>
                                        <path
                                            d="M259.42,122.741c10.2,3.75,15.44,15.1,11.69,25.29c-6.02,16.38-19.67,20.82-30.72,20.82c-4,0-7.65-0.58-10.48-1.38 c-2.44-0.7-4.31-2.68-4.86-5.17c-0.55-2.48,0.31-5.07,2.24-6.73c7.74-6.67,7.57-7.95,6.86-13.34l-0.13-0.98 c-0.81-6.34,1.31-11.87,5.96-15.58C245.16,121.551,252.97,120.371,259.42,122.741z M258.13,143.261 c1.11-3.04-0.45-6.41-3.48-7.53c-0.66-0.24-1.42-0.36-2.2-0.36c-1.45,0-2.94,0.4-3.84,1.12c-0.37,0.3-1.13,0.9-0.86,3l0.12,0.94 c0.66,5.04,0.88,9.19-1.44,13.87C251,153.081,255.63,150.041,258.13,143.261z">
                                        </path>
                                        <path
                                            d="M256.45,69.811c4.51,6.76,5.32,16.05,2.01,23.12c-2.92,6.25-8.61,10.14-16.02,10.94l-1.25,0.14 c-7.15,0.75-9.56,1-16.01,13.51c-1.16,2.26-3.47,3.7-6.02,3.75c-0.04,0-0.08,0-0.13,0c-2.49,0-4.8-1.35-6.03-3.53 c-6.63-11.79-12.82-38.33,11.24-54.38c5.17-3.44,11.36-4.66,17.44-3.45C247.76,61.131,253.01,64.651,256.45,69.811z M245.93,87.071c1.25-2.67,0.81-6.88-0.99-9.59c-1.39-2.08-3.51-3.51-5.97-4c-2.47-0.49-4.97,0.01-7.05,1.4 c-10.26,6.83-11.77,16.19-10.83,23.66c5.83-6.53,11.39-7.53,18.65-8.3l1.2-0.12C244.31,89.751,245.4,88.201,245.93,87.071z">
                                        </path>
                                        <path
                                            d="M246.62,219.581c5.46,0,9.88,4.42,9.88,9.88c0,5.46-4.42,9.88-9.88,9.88c-5.46,0-9.89-4.42-9.89-9.88 c0-5.46,4.42-9.88,9.88-9.88H246.62z">
                                        </path>
                                        <path
                                            d="M116.16,89.111c5.46,0,9.88,4.43,9.88,9.89c0,5.45-4.42,9.88-9.88,9.88c-5.46,0-9.89-4.43-9.89-9.88 c0-5.46,4.42-9.89,9.88-9.89H116.16z">
                                        </path>
                                        <path
                                            d="M93.83,15.181c21.49,19.34,11.54,44.71,3.28,55.43c-1.32,1.71-3.36,2.69-5.48,2.69c-0.37,0-0.75-0.03-1.12-0.09 c-2.51-0.42-4.6-2.17-5.42-4.58c-4.58-13.31-6.92-13.91-13.89-15.68l-1.22-0.31c-7.22-1.87-12.29-6.54-14.28-13.14 c-2.25-7.47-0.11-16.55,5.32-22.59C69.59,7.391,84.3,6.611,93.83,15.181z M92.19,48.891c2.13-9.23-0.36-16.9-7.62-23.43 c-1.79-1.61-4.04-2.4-6.27-2.4c-2.58,0-5.14,1.04-6.99,3.1c-2.17,2.42-3.21,6.52-2.36,9.35c0.36,1.19,1.22,2.89,4.49,3.73 l1.17,0.3c7.05,1.8,12.39,3.58,17.2,10.81C91.95,49.871,92.07,49.391,92.19,48.891z">
                                        </path>
                                        <path
                                            d="M74.11,92.211c0.2,2.54-1.02,4.98-3.16,6.35c-1.14,0.73-2.44,1.1-3.74,1.1c-1.15,0-2.31-0.29-3.36-0.88 c-9.31-5.17-10.63-4.48-15.55-1.89l-0.91,0.47c-5.77,3-11.8,2.92-16.98-0.22c-5.77-3.5-9.65-10.57-9.65-17.58 c0-11.08,9.02-20.1,20.1-20.1C65.2,59.461,73.25,80.891,74.11,92.211z M41.87,84.641c4.73-2.49,8.74-4.19,14.29-3.46 c-2.81-4.21-7.5-7.88-15.3-7.88c-3.45,0-6.26,2.81-6.26,6.26c0,2.13,1.37,4.77,2.99,5.75c0.45,0.27,1.38,0.84,3.42-0.22 L41.87,84.641z">
                                        </path>
                                        <path
                                            d="M63.83,115.201c0.48,2.5-0.45,5.06-2.42,6.67c-10.91,8.89-10.66,11.3-9.92,18.45l0.12,1.25 c0.74,7.42-1.89,13.79-7.4,17.94c-3.91,2.93-9,4.47-14.11,4.47c-3.05,0-6.11-0.55-8.93-1.67c-11.89-4.76-17.7-18.3-12.95-30.19 c10.74-26.85,37.99-26.27,50.9-22.21C61.54,110.671,63.36,112.701,63.83,115.201z M41.93,121.871c-0.49,0.04-0.99,0.09-1.5,0.15 c-9.4,1.19-15.73,6.17-19.36,15.23c-1.92,4.81,0.43,10.29,5.24,12.21c3.02,1.21,7.22,0.76,9.58-1.01c1-0.75,2.29-2.14,1.96-5.51 l-0.13-1.2C36.97,134.501,36.8,128.881,41.93,121.871z">
                                        </path>
                                        <path
                                            d="M34.62,203.271c5.46,0,9.88,4.42,9.88,9.88c0,5.46-4.42,9.88-9.88,9.88s-9.89-4.42-9.89-9.88c0-5.46,4.42-9.88,9.88-9.88 H34.62z">
                                        </path>
                                    </g>
                                    <g> </g>
                                </g>
                            </g>
                        </g>
                    </svg> <span
                        style="text-align: left; margin: 1em; height: auto; width: auto; border-color: #ffffff; border-radius: .5em;">
                        Smart Irrigation </span></button>
            </div>

            <div class="dash-items">
                <a href="https://kitfountain.ionode.cloud/" target="_blank" style="text-decoration: none;">
                    <button class="btn-DB"
                        style="font-weight: bolder; background: transparent; width: auto; color: #1E918A; cursor: pointer;">
                        
                        <svg height="2em" width="2em" viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--fxemoji" preserveAspectRatio="xMidYMid meet" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><path fill="#59CAFC" d="M500.95 489.617c0 6.6-5.4 12-12 12H21.717c-6.6 0-12-5.4-12-12V22.383c0-6.6 5.4-12 12-12H488.95c6.6 0 12 5.4 12 12"></path><path fill="#1C9338" d="M9.716 236.244v253.373c0 6.6 5.4 12 12 12H488.95c6.6 0 12-5.4 12-12V229.963c-105.2-1.335-396.886 2.668-491.234 6.28z"></path><path fill="#E5E4DF" d="M36.892 346.282v55.59c0 30.702 98.098 55.59 219.108 55.59s219.108-24.89 219.108-55.59v-55.59H36.892z"></path><ellipse fill="#F4F3EF" cx="256" cy="346.282" rx="219.108" ry="55.59"></ellipse><ellipse fill="#00B1FF" cx="256" cy="346.282" rx="159.142" ry="40.376"></ellipse><ellipse fill="#F4F3EF" cx="256" cy="255.03" rx="53.717" ry="21.342"></ellipse><path fill="#E5E4DF" d="M388.062 223.254H122.327c0 26.103 32.906 48.526 79.956 58.308V336.2c0 11.786 24.05 21.34 53.717 21.34s53.717-9.554 53.717-21.34v-54.975c46.19-9.955 78.345-32.166 78.345-57.97z"></path><ellipse fill="#F4F3EF" cx="255.195" cy="223.254" rx="132.868" ry="21.105"></ellipse><ellipse fill="#00B1FF" cx="255.195" cy="223.254" rx="95.541" ry="15.176"></ellipse><ellipse fill="#F4F3EF" cx="255.781" cy="157.801" rx="39.126" ry="15.544"></ellipse><path fill="#E5E4DF" d="M351.97 134.657H158.42c0 19.012 23.967 35.345 58.236 42.47v39.795h.067c1.152 4.087 18.196 7.33 39.06 7.33c20.86 0 37.906-3.243 39.058-7.33h.068v-40.04c33.642-7.252 57.062-23.43 57.062-42.225z"></path><ellipse fill="#F4F3EF" cx="255.195" cy="134.657" rx="96.776" ry="15.372"></ellipse><ellipse fill="#00B1FF" cx="255.195" cy="134.657" rx="69.589" ry="11.054"></ellipse><path fill="#B3F1FF" d="M400.584 70.192c-3.366 9.888-14.11 15.174-23.998 11.808a18.98 18.98 0 0 1-3.458-1.577l-.714-.427l-4.964-2.94c-.397-.234-.815-.5-1.256-.745c-.446-.218-.912-.448-1.398-.687l-3.164-1.578c-1.13-.626-2.354-1.062-3.647-1.587l-1.995-.81c-.683-.276-1.383-.592-2.103-.778l-4.522-1.41l-4.907-1.092l-.64-.146l-.643-.077l-1.3-.162l-2.672-.35a8.673 8.673 0 0 0-1.36-.106l-1.378-.05l-2.82-.12c-.947.045-1.902.09-2.863.137l-1.462.066l-.74.03l-.73.102l-2.965.403c-.498.078-1.01.103-1.505.223l-1.494.336l-3.04.665l-3.02.928l-1.53.462c-.508.17-1 .385-1.504.576l-3.032 1.175c-3.966 1.802-7.98 3.78-11.7 6.265c-1.924 1.142-3.686 2.526-5.517 3.79c-.89.667-1.747 1.372-2.62 2.05c-.87.68-1.737 1.362-2.55 2.095l-2.468 2.14c-.803.724-1.57 1.475-2.35 2.203c-1.578 1.436-2.996 2.976-4.44 4.427c-2.79 2.99-5.377 5.918-7.603 8.76c-2.272 2.813-4.203 5.517-5.888 7.94c-1.643 2.44-3.048 4.61-4.094 6.43a61.116 61.116 0 0 0-2.02 3.67c.164 1.234.3 2.42.387 3.516l.182 3.943c.005 1.09-.08 1.912-.102 2.633l-.108 2.165a3.695 3.695 0 0 1-7.346.346v-.007l-.31-2.146c-.112-.682-.2-1.6-.397-2.538c-.223-.875-.48-1.88-.765-3.006c-.113-.546-.335-1.164-.55-1.802l-.666-1.994c-.12-.345-.222-.7-.36-1.053l-.458-1.076l-.953-2.255c-.294-.782-.757-1.546-1.147-2.35c-.414-.797-.815-1.622-1.264-2.452l-1.505-2.496l-.772-1.286l-.883-1.266l-1.806-2.596c-.673-.84-1.357-1.698-2.053-2.57c-.35-.43-.682-.878-1.053-1.304l-1.152-1.265c-.785-.84-1.518-1.73-2.362-2.553c-3.29-3.36-7.093-6.52-11.194-9.406c-4.128-2.866-8.685-5.273-13.386-7.235c-4.694-2-9.666-3.264-14.572-4.004l-1.84-.262c-.305-.042-.607-.096-.914-.128l-.926-.05l-3.656-.22c-2.443.093-4.827.006-7.188.372c-2.352.152-4.657.72-6.903 1.13c-1.122.24-2.224.63-3.315.918c-1.09.305-2.17.58-3.218 1.033l-3.114 1.176c-.515.165-1.013.428-1.51.666l-1.48.71c-.976.485-1.952.88-2.888 1.4l-2.75 1.598c-1.82.952-3.5 2.21-5.137 3.312l-1.215.824l-.598.403l-.574.462c-.758.608-1.504 1.204-2.233 1.79c-.727.574-1.44 1.138-2.136 1.69c-.68.585-1.325 1.213-1.963 1.79c-1.267 1.18-2.485 2.24-3.592 3.312l-3.02 3.164c-.922.994-1.813 1.8-2.528 2.714l-4.605 5.432l-.46.54c-8.008 9.45-22.16 10.616-31.608 2.606s-10.615-22.16-2.605-31.61a23.831 23.831 0 0 1 3.154-3.055l7.414-5.89c1.14-.954 2.596-1.88 4.08-2.947l4.865-3.383c1.79-1.157 3.776-2.318 5.82-3.56c1.035-.613 2.067-1.262 3.172-1.88l3.48-1.795l3.623-1.846l.926-.468l.98-.42l1.987-.848c2.677-1.124 5.376-2.342 8.37-3.263l4.465-1.482c1.516-.472 3.124-.818 4.703-1.227l2.394-.587c.8-.192 1.597-.404 2.438-.52l5.016-.82c1.666-.31 3.4-.433 5.135-.564c1.738-.115 3.464-.31 5.224-.334c3.533.018 7.07-.04 10.635.398c3.56.224 7.093.98 10.6 1.62c1.728.455 3.457.91 5.19 1.368l1.288.35c.425.132.844.287 1.265.43l2.515.885c6.66 2.418 12.98 5.523 18.59 9.33c5.625 3.772 10.72 7.965 15.095 12.484c4.352 4.543 8.135 9.238 11.245 13.98c.8 1.167 1.48 2.4 2.2 3.563l1.05 1.748c.334.585.63 1.19.94 1.777l1.795 3.466l1.517 3.444l.724 1.663c.206.565.41 1.124.61 1.677c.4 1.1.787 2.175 1.165 3.224c.214.686.408 1.363.598 2.032c.398-1.02.82-2.078 1.284-3.21c1.23-2.88 2.665-6.12 4.437-9.563c1.726-3.472 3.813-7.13 6.147-10.962c1.223-1.877 2.42-3.86 3.812-5.783c.683-.97 1.357-1.965 2.077-2.946l2.24-2.935c.74-1 1.547-1.965 2.368-2.935c.82-.97 1.63-1.967 2.488-2.937c1.78-1.884 3.498-3.89 5.467-5.712c3.77-3.81 8.105-7.27 12.65-10.568l3.543-2.316c.597-.38 1.182-.782 1.792-1.144l1.865-1.037c1.253-.687 2.504-1.375 3.75-2.06c1.305-.596 2.606-1.19 3.9-1.783l1.957-.88c.65-.3 1.334-.505 2-.76c1.348-.48 2.69-.96 4.023-1.438l1.006-.352l1.023-.278l2.042-.548c1.36-.357 2.717-.728 4.073-1.052l4.076-.72c.68-.114 1.353-.23 2.024-.343c.673-.12 1.343-.228 2.01-.27c1.34-.114 2.665-.227 3.974-.34c.658-.05 1.313-.103 1.963-.155l.975-.075l.958-.002c2.547.006 5.054-.01 7.47.063l6.917.62c1.127.077 2.177.28 3.218.457l3.05.53c1.987.353 3.902.657 5.592 1.142l4.828 1.244l2.152.567c.67.204 1.29.425 1.89.622l7.532 2.563c9.88 3.367 15.168 14.11 11.802 24zm-122.027 63.484c.8.794 2.09.79 2.883-.01l1.645-1.654c.535-.57 1.202-1.147 1.975-1.837c.748-.705 1.708-1.46 2.768-2.31c2.15-1.655 4.852-3.54 8.165-5.29c3.306-1.75 7.217-3.36 11.627-4.567a65.111 65.111 0 0 1 14.525-2.256c5.215-.258 10.74.09 16.36.99c5.62.93 11.337 2.4 16.937 4.456a93.802 93.802 0 0 1 8.3 3.444c2.73 1.258 5.393 2.674 7.992 4.177a100.008 100.008 0 0 1 14.524 10.23a99.616 99.616 0 0 1 6.273 5.856c1.938 2.036 3.802 4.074 5.46 6.192c3.36 4.2 6.096 8.536 8.205 12.765c2.083 4.244 3.576 8.368 4.495 12.204a51.702 51.702 0 0 1 1.41 10.477c.11 3.107-.13 5.792-.43 7.982c-.076.546-.15 1.064-.217 1.55l-.267 1.36c-.156.843-.3 1.558-.463 2.133l-.438 1.764l-.107.427c-.135.562-.24 1.137-.31 1.724c-.964 8.088 4.81 15.426 12.898 16.39c8.088.966 15.426-4.808 16.39-12.896l.34-2.83c.123-.916.214-2.06.293-3.408l.13-2.165c.01-.774.023-1.596.036-2.465c.024-3.467-.158-7.697-.93-12.446a78.123 78.123 0 0 0-4.113-15.43c-2.054-5.422-4.904-10.962-8.445-16.334c-3.564-5.355-7.843-10.526-12.712-15.27c-2.416-2.395-5.023-4.632-7.698-6.817a119.554 119.554 0 0 0-8.426-6.12a118.22 118.22 0 0 0-18.47-9.88c-3.212-1.366-6.467-2.61-9.766-3.666a108.323 108.323 0 0 0-9.937-2.758a107.055 107.055 0 0 0-19.797-2.685c-6.48-.237-12.763.144-18.62 1.158a74.072 74.072 0 0 0-16.055 4.557c-4.784 1.965-8.924 4.303-12.344 6.69c-3.427 2.387-6.13 4.815-8.24 6.894c-1.036 1.06-1.96 1.996-2.718 2.903c-.77.88-1.432 1.628-1.87 2.227l-1.432 1.843a2.044 2.044 0 0 0 .173 2.7z"></path></g></svg>

                        <span style="text-align: left; margin: .05em; height: 50%; width: 50%; border-color: #ffffff; border-radius: .5em;">
                        Smart Fountain</span>
                    </button>
                </a>
            </div>

            <div class="dash-items">
                <a href="https://magicmirror.ionode.cloud/" target="_blank" style="text-decoration: none;">
                    <button class="btn-DB"
                        style="font-weight: bolder; background: transparent; width: auto; color: #1E918A; cursor: pointer;">
                        
                        <svg width="2em" height="2em" viewBox="0 0 36 36" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--twemoji" preserveAspectRatio="xMidYMid meet" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><path fill="#FFAC33" d="M29 32H7c-.55 0-1-.45-1-1V7c0-.55.45-1 1-1h22c.55 0 1 .45 1 1v24c0 .55-.45 1-1 1z"></path><path fill="#D99E82" d="M8 8h20v22H8z"></path><path fill="#FFD983" d="M28 30H8L28 8z"></path><path fill="#BBDDF5" d="M9 9h18v20H9z"></path><path fill="#F5F8FA" d="M24.231 9L11.769 29H18l9-14.615V9z"></path><path fill="#662113" d="M28 8H7V7h22zM8 30l-1 1V8h1z"></path><path fill="#C1694F" d="M29 31H7l1-1h21zm0-24l-1 1v22h1z"></path><path d="M26.294 5.31s-.163-.587-1.04-1.069c-.594-.327-1.604-.089-1.604-.089s-.323-.834-1.634-1.366C21.066 2.399 20 3 20 3c0-1-.977-2-2-2s-2 1-2 2c0 0-1.066-.601-2.016-.214c-1.31.532-1.634 1.366-1.634 1.366s-1.01-.238-1.604.089c-.876.482-1.04 1.069-1.04 1.069S7.894 6 7 6h22c-.894 0-2.706-.69-2.706-.69zM7 32c.894 0 2.706.414 2.706.414s.163.352 1.04.642c.594.196 1.604.053 1.604.053s.323.5 1.634.82C14.934 34.16 16 33.8 16 33.8c0 .6.977 1.2 2 1.2s2-.6 2-1.2c0 0 1.066.36 2.016.129c1.31-.319 1.634-.82 1.634-.82s1.01.143 1.604-.053c.876-.289 1.04-.642 1.04-.642S28.106 32 29 32H7z" fill="#FFAC33"></path><path d="M9.868 6.375H11A.375.375 0 0 0 11.375 6c0-.317.092-.537.28-.673c.551-.398 1.793-.115 2.227.029a.379.379 0 0 0 .493-.353c.002-.147.056-.628.625-.628c.688 0 1.483.641 1.734.889l.001.001a.375.375 0 0 0 .537-.523l-.001-.001l-.005-.005c-.405-.405-.347-1.037-.157-1.494c.203-.495.587-.867.891-.867s.688.372.892.866c.19.457.248 1.089-.157 1.494l-.005.005l-.001.001a.374.374 0 0 0 .538.523v-.001c.25-.247 1.045-.888 1.733-.888c.569 0 .622.481.625.625a.376.376 0 0 0 .493.356c.433-.143 1.674-.427 2.227-.029c.188.136.28.356.28.673c0 .207.168.375.375.375h1.132a.375.375 0 0 0 0-.75h-.79a1.406 1.406 0 0 0-.559-.907c-.718-.517-1.867-.34-2.489-.19c-.156-.456-.55-.903-1.294-.903c-.43 0-.852.151-1.211.342a2.55 2.55 0 0 0-.204-1.013c-.303-.732-.867-1.222-1.437-1.299a.37.37 0 0 0-.296.001c-.57.077-1.135.567-1.438 1.299a2.547 2.547 0 0 0-.203 1.013c-.36-.192-.781-.343-1.211-.343c-.744 0-1.138.447-1.294.903c-.623-.151-1.775-.326-2.489.19a1.401 1.401 0 0 0-.558.907h-.791a.375.375 0 0 0 0 .75zm16.264 24.95H25c-.207 0-.405.222-.405.429c-.333.283-1.708.214-2.533.076c-.11-.018-.218-.007-.302.063a.334.334 0 0 0-.131.267c-.016.043-.163.165-.629.165c-.896 0-1.823-.456-1.833-.461a.375.375 0 0 0-.334.671c.152.076.22.152.203.225c-.052.223-.521.565-1.035.565s-.983-.343-1.035-.565c-.018-.072.051-.148.203-.225a.374.374 0 0 0 .168-.503a.377.377 0 0 0-.502-.168c-.009.005-.937.461-1.833.461c-.466 0-.614-.122-.625-.125a.372.372 0 0 0-.133-.286a.381.381 0 0 0-.304-.084c-.823.139-2.198.208-2.563-.13a.375.375 0 0 0-.375-.375H9.868a.375.375 0 0 0 0 .75h.848a.864.864 0 0 0 .204.251c.611.517 2.153.38 2.854.287c.164.227.507.462 1.227.462a4.56 4.56 0 0 0 1.226-.187c.002.015.006.029.009.044c.146.619.955 1.143 1.765 1.143s1.619-.523 1.766-1.143l.009-.044c.361.103.791.187 1.226.187c.72 0 1.062-.235 1.227-.462c.699.094 2.243.23 2.854-.287a.848.848 0 0 0 .204-.251h.848a.375.375 0 1 0-.003-.75z" fill="#C1694F"></path></g></svg>
                        
                        <span style="text-align: left; margin: 1em; height: auto; width: auto; border-color: #ffffff; border-radius: .5em;">
                        Magic Mirror</span>
                    </button>
                </a>
            </div>

            <div class="dash-items">
                <a href="http://weatherforecast.ionode.cloud/"  target="_blank" style="text-decoration: none;">
                    <button class="btn-DB" style="font-weight: bolder; background: transparent; width: auto; color: #1E918A; cursor: pointer;">
                        
                        <svg height="2em" width="2em" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 60.176 60.176" xml:space="preserve" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <path style="fill:#F0C419;" d="M6.139,23.807c0-0.552-0.447-1-1-1H1c-0.553,0-1,0.448-1,1s0.447,1,1,1h4.139 C5.691,24.807,6.139,24.359,6.139,23.807z"></path> <path style="fill:#F0C419;" d="M21,2.807c-0.553,0-1,0.448-1,1v4.138c0,0.552,0.447,1,1,1s1-0.448,1-1V3.807 C22,3.255,21.553,2.807,21,2.807z"></path> <path style="fill:#F0C419;" d="M6.535,7.927c-0.391-0.391-1.023-0.391-1.414,0s-0.391,1.023,0,1.414l3.956,3.956 c0.195,0.195,0.451,0.293,0.707,0.293s0.512-0.098,0.707-0.293c0.391-0.391,0.391-1.023,0-1.414L6.535,7.927z"></path> <path style="fill:#F0C419;" d="M36.88,7.927c-0.391-0.391-1.023-0.391-1.414,0l-3.956,3.956c-0.391,0.391-0.391,1.023,0,1.414 c0.195,0.195,0.451,0.293,0.707,0.293s0.512-0.098,0.707-0.293l3.956-3.956C37.271,8.951,37.271,8.318,36.88,7.927z"></path> <path style="fill:#F0C419;" d="M14.915,6.91c-0.217-0.509-0.808-0.745-1.312-0.53c-0.509,0.216-0.746,0.803-0.53,1.311l0.809,1.905 c0.162,0.381,0.532,0.61,0.921,0.61c0.131,0,0.264-0.026,0.391-0.08c0.509-0.216,0.746-0.803,0.53-1.311L14.915,6.91z"></path> <path style="fill:#F0C419;" d="M28.093,6.254c-0.513-0.205-1.095,0.041-1.302,0.553l-0.775,1.918 c-0.207,0.512,0.04,1.095,0.552,1.302c0.123,0.049,0.25,0.073,0.375,0.073c0.396,0,0.77-0.236,0.927-0.626l0.775-1.918 C28.852,7.044,28.604,6.461,28.093,6.254z"></path> <path style="fill:#F0C419;" d="M6.009,29.084l-1.904,0.809c-0.509,0.216-0.746,0.803-0.53,1.311c0.162,0.381,0.532,0.61,0.921,0.61 c0.131,0,0.264-0.026,0.391-0.08l1.904-0.809c0.509-0.216,0.746-0.803,0.53-1.311C7.104,29.105,6.512,28.869,6.009,29.084z"></path> <path style="fill:#F0C419;" d="M4,18.017l1.918,0.775c0.123,0.049,0.25,0.073,0.375,0.073c0.396,0,0.77-0.236,0.927-0.625 c0.207-0.512-0.04-1.095-0.552-1.302L4.75,16.162c-0.512-0.205-1.095,0.041-1.302,0.552C3.241,17.227,3.488,17.81,4,18.017z"></path> </g> <g> <path style="fill:#EDE21B;" d="M12.806,34.876c0.719,0.079,1.418,0.223,2.087,0.439c-0.446-2.027,0.004-4.231,1.426-5.958 c1.872-2.273,4.878-3.063,7.523-2.224l0.012,0.004c0.816-2.055,2.586-3.693,4.902-4.238c0.824-0.194,1.646-0.225,2.441-0.129 c-0.007-0.155-0.023-0.307-0.023-0.464c0-2.063,0.604-3.982,1.632-5.605C30.39,12.7,26.015,10.014,21,10.014 c-7.618,0-13.793,6.175-13.793,13.793C7.207,28.351,9.414,32.366,12.806,34.876z"></path> </g> <path style="fill:#D0E8F9;" d="M60.152,29.369h-0.081c0.035,0.304,0.059,0.611,0.059,0.925c0,0.553-0.447,1-1,1s-1-0.447-1-1 c0-3.309-2.691-6-6-6s-6,2.691-6,6c0,0.553-0.447,1-1,1s-1-0.447-1-1c0-4.064,3.049-7.423,6.978-7.927 c-0.226-5.039-4.384-9.073-9.478-9.073c-5.111,0-9.281,4.06-9.481,9.123c0.829,0.196,1.632,0.52,2.378,0.981 c1.816,1.125,3.086,2.89,3.576,4.97c0.126,0.538-0.207,1.076-0.744,1.203c-0.538,0.121-1.076-0.207-1.203-0.744 c-0.758-3.222-3.999-5.226-7.214-4.467c-3.221,0.758-5.225,3.994-4.467,7.215c0.126,0.537-0.207,1.075-0.745,1.202 c-0.076,0.018-0.153,0.026-0.229,0.026c-0.453,0-0.864-0.311-0.973-0.771c-0.294-1.251-0.268-2.502,0.012-3.674 c-2.058-0.301-4.137,0.476-5.493,2.122c-1.258,1.529-1.625,3.498-1.175,5.285c0.001,0.012,0.007,0.022,0.008,0.034 c0.306,1.186,0.97,2.29,1.985,3.127c0.426,0.352,0.487,0.981,0.137,1.408c-0.198,0.24-0.484,0.364-0.773,0.364 c-0.224,0-0.448-0.074-0.635-0.228c-1.217-1.002-2.088-2.311-2.546-3.781c-4.043-1.054-8.294,0.647-10.49,4.262 c-1.317,2.168-1.712,4.72-1.11,7.185c0.602,2.466,2.127,4.549,4.296,5.867c0.472,0.287,0.622,0.901,0.335,1.374 c-0.188,0.31-0.518,0.48-0.855,0.48c-0.133,0-0.265-0.036-0.392-0.091c1.58,0.936,3.399,1.509,5.344,1.593l8.209,0.003 c5.307-0.085,9.853-3.36,11.791-7.992c1.963,4.693,6.603,8,12,8c9.374,0,17-7.626,17-17v-10L60.152,29.369z"></path> <g> <path style="fill:#ABCADD;" d="M53.108,22.435c-0.231-6.139-5.284-11.066-11.478-11.066c-6.142,0-11.16,4.844-11.47,10.91 c-0.558,0.012-1.119,0.078-1.676,0.209c-2.336,0.55-4.185,2.082-5.229,4.052c-2.882-0.585-5.848,0.433-7.75,2.742 c-1.251,1.52-1.879,3.408-1.81,5.359c-4.63-0.834-9.34,1.224-11.844,5.344c-1.596,2.625-2.073,5.714-1.345,8.698 s2.575,5.506,5.2,7.102c0.162,0.099,0.342,0.146,0.519,0.146c0.338,0,0.667-0.171,0.855-0.48c0.287-0.473,0.137-1.087-0.335-1.374 c-2.169-1.318-3.694-3.401-4.296-5.867c-0.602-2.465-0.207-5.017,1.11-7.185c2.196-3.614,6.447-5.315,10.49-4.262 c0.458,1.471,1.33,2.779,2.546,3.781c0.187,0.153,0.411,0.228,0.635,0.228c0.289,0,0.575-0.124,0.773-0.364 c0.351-0.427,0.289-1.057-0.137-1.408c-1.016-0.836-1.679-1.941-1.985-3.127c-0.001-0.012-0.007-0.022-0.008-0.034 c-0.45-1.787-0.083-3.756,1.175-5.285c1.356-1.646,3.435-2.423,5.493-2.122c-0.28,1.173-0.307,2.423-0.012,3.674 c0.108,0.461,0.52,0.771,0.973,0.771c0.076,0,0.153-0.009,0.229-0.026c0.538-0.127,0.871-0.665,0.745-1.202 c-0.758-3.221,1.246-6.457,4.467-7.215c3.215-0.759,6.456,1.245,7.214,4.467c0.127,0.537,0.665,0.865,1.203,0.744 c0.537-0.127,0.87-0.665,0.744-1.203c-0.49-2.08-1.76-3.845-3.576-4.97c-0.746-0.462-1.549-0.785-2.378-0.981 c0.2-5.063,4.37-9.123,9.481-9.123c5.094,0,9.253,4.033,9.478,9.073c-3.929,0.504-6.978,3.863-6.978,7.927c0,0.553,0.447,1,1,1 s1-0.447,1-1c0-3.309,2.691-6,6-6s6.046,2.691,6.046,6c0,0.028,0,1.327,0,3c0,0.552,0.448,1,1,1s1-0.448,1-1v-3 C60.176,26.29,57.059,22.92,53.108,22.435z"></path> </g> <g> <path style="fill:#ABCADD;" d="M43.176,57.369c-4.973,0-9.491-2.608-12-6.789c-2.509,4.181-7.027,6.789-12,6.789 c-0.552,0-1-0.447-1-1s0.448-1,1-1c4.853,0,9.201-2.899,11.078-7.386l0.922-2.206l0.922,2.206 c1.876,4.486,6.225,7.386,11.078,7.386c0.552,0,1,0.447,1,1S43.729,57.369,43.176,57.369z"></path> </g> <path style="fill:#ABCADD;" d="M55.073,43.244c-0.458-3.979-3.843-7.082-7.943-7.082c-4.411,0-8,3.589-8,8c0,0.552,0.448,1,1,1 s1-0.448,1-1c0-3.309,2.691-6,6-6c3.003,0,5.49,2.219,5.925,5.102c-2.797,0.509-4.925,2.957-4.925,5.898c0,0.552,0.448,1,1,1 s1-0.448,1-1c0-2.206,1.794-4,4-4s4,1.794,4,4c0,0.552,0.448,1,1,1s1-0.448,1-1C60.13,46.175,57.934,43.699,55.073,43.244z"></path> </g></svg>

                        <span style="text-align: left; margin: 0.05em; height: auto; width: auto; border-color: #ffffff; border-radius: .5em;">
                            Weather Forecast</span>
                    </button>
                </a>
            </div>

        </div>
    </div>


    <div id="main">
        <div id="top-bar">
            <h1> Dashboard </h1>
            <input type="text" placeholder="Type here...">

            <% if (locals.user) { %>
                <button type="button" style="background-color: rgba(14, 19, 31, 0.078); color: white;border: none;"
                    id="signOut" onclick="SignOut()" enabled>Sign Out
                </button>

                <% } else { %>
                    <button type="button" style="background-color: rgba(14, 19, 31, 0.078); color: white;border: none;"
                        id="signIn" onclick="SignIn()">Sign In</button>
                    <% } %>

        </div>


        <div id="widgets">
            <div class="widget">Widget 1</div>
            <div class="widget">Widget 2</div>
            <div class="widget">Widget 3</div>
            <div class="widget">Widget 4</div>
        </div>
        <div id="chart">
            <canvas id="lineChart"></canvas>
        </div>

        <img src="https://images.pexels.com/photos/1685413/pexels-photo-1685413.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
            alt="RandomImage" height="40%" width="30%" class="imgRan">

        <div id="scheduled-bells">
            <h2>Scheduled Bells</h2>
            <table id="Bell_TableDash">
                <thead>
                    <tr>
                        <th>Bell Name</th>
                        <th>Frequency</th>
                        <th>Date</th>
                        <th>Time</th>
                        <th>Current Status</th>
                    </tr>
                </thead>

                <tbody>

                </tbody>
            </table>
        </div>
        <div id="promo">
            <p>Check the status of Irrigation</p>
            <button>Manage Now</button>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/luxon@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1"></script>

    <!-- <script src="https://cdn.jsdelivr.net/npm/date-fns@2.30.0/dist/date-fns.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@2.0.0"></script> -->

    <script>
        const ctx = document.getElementById('lineChart').getContext('2d');
        const lineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
                datasets: [{
                    label: 'Data Trends',
                    data: [6, 5, 8, 1, 6, 5, 0],
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/js-cookie@3.0.0/dist/js.cookie.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>


    <script>

        function SignOut() {

            history.pushState(null, null, "/signin");

            Cookies.remove("token");

            window.onpopstate = function (event) {
                window.location.href = "/signin";
            }

            window.location.href = "/signin";
        }

        function SignIn() {
            window.location.href = "/signin";
        }

        async function showDB() {
            async function fetchData() {
                try {
                    console.log("Fetching data");
                    const response = await fetch('/api/Bell_data');
                    const data = await response.json();
                    console.log("Fetched Data: ", data);
                    return data;
                } catch (error) {
                    console.error('Error fetching data:', error);
                    return null; // Return null in case of error
                }
            }

            function displayData(data) {
                const tableBody = document.querySelector('#Bell_TableDash tbody');
                if (!tableBody) { console.error('Table body not found'); return; }
                console.log(tableBody);
                tableBody.innerHTML = '';
                data.forEach(item => {
                    const row = document.createElement('tr');
                    const bellNameCell = document.createElement('td');
                    const bellFrequencyCell = document.createElement('td');
                    const bellDateCell = document.createElement('td');
                    const bellTimeCell = document.createElement('td');
                    const bellCurrentStatusCell = document.createElement('td');


                    bellNameCell.textContent = item.bell_Name;
                    bellFrequencyCell.textContent = item.bell_Frequency;
                    bellDateCell.textContent = item.bell_Date;
                    bellTimeCell.textContent = item.bell_Time;
                    bellCurrentStatusCell.textContent = item.bell_Status;

                    row.appendChild(bellNameCell);
                    row.appendChild(bellFrequencyCell);
                    row.appendChild(bellDateCell);
                    row.appendChild(bellTimeCell);
                    row.appendChild(bellCurrentStatusCell);
                    tableBody.appendChild(row);
                });
            }

            // Check if data exists in local storage
            let data = JSON.parse(localStorage.getItem('bellData'));

            if (!data) {
                // If not, fetch data from the server
                data = await fetchData();

                if (data) {
                    // Store fetched data in local storage
                    localStorage.setItem('bellData', JSON.stringify(data));
                }
            }

            if (data) {
                console.log("Display Data");
                displayData(data);

                // Delay the redirection
                setTimeout(() => {
                    window.location.href = "/";
                }, 1500); // Delay in milliseconds (3000ms = 3s)
            }
        }

        // Function to retrieve and display data from local storage after page loads
        document.addEventListener('DOMContentLoaded', function () {
            const storedData = localStorage.getItem('bellData');
            if (storedData) {
                const data = JSON.parse(storedData);
                const tableBody = document.querySelector('#Bell_TableDash tbody');
                if (tableBody) {
                    tableBody.innerHTML = '';
                    data.forEach(item => {
                        const row = document.createElement('tr');
                        const bellNameCell = document.createElement('td');
                        const bellFrequencyCell = document.createElement('td');
                        const bellDateCell = document.createElement('td');
                        const bellTimeCell = document.createElement('td');
                        const bellCurrentStatusCell = document.createElement('td');
                        const actionsCell = document.createElement('td');

                        bellNameCell.textContent = item.bell_Name;
                        bellFrequencyCell.textContent = item.bell_Frequency;
                        bellDateCell.textContent = item.bell_Date;
                        bellTimeCell.textContent = item.bell_Time;
                        bellCurrentStatusCell.textContent = item.bell_Status;

                        row.appendChild(bellNameCell);
                        row.appendChild(bellFrequencyCell);
                        row.appendChild(bellDateCell);
                        row.appendChild(bellTimeCell);
                        row.appendChild(bellCurrentStatusCell);
                        row.appendChild(actionsCell);
                        tableBody.appendChild(row);
                    });
                }
            }
        });


        function showAtten() {
            let elemMain = document.getElementById("main");
            elemMain.style.height = "98vh"
            elemMain.innerHTML = '<h1>Attendance</h1> <div id="data-container"> <table id="data-table"> <thead> <tr> <th>Name</th> <th>Absent/Present</th> </tr> </thead> <tbody>  </tbody> </table> </div>';

            async function fetchData() {
                try {
                    const response = await fetch('/api/data');
                    const data = await response.json();
                    displayData(data);
                } catch (error) { console.error('Error fetching data:', error); }
            }

            function displayData(data) {
                const tableBody = document.querySelector('#data-table tbody');
                tableBody.innerHTML = '';
                forEach(item => {
                    const row = document.createElement('tr');
                    const nameCell = document.createElement('td');
                    const Present_AbsentCell = document.createElement('td');
                    nameCell.textContent = item.name;
                    Present_AbsentCell.textContent = item.value;
                    row.appendChild(nameCell);
                    row.appendChild(Present_AbsentCell);
                    tableBody.appendChild(row);
                });
            }
            fetchData();

        }

        function showBells() {
            let elemMain = document.getElementById("main");
            // elemMain.style.height = "98vh";
            elemMain.innerHTML = `
        <nav style="display:flex; justify-content: space-around;flex-direction: row; height: auto; width: auto;">
            <h1>${window.location + "Smart Bells"}</h1>
            <div class="container-fluid">
                <form class="d-flex" role="search">
                    <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                    <% if (locals.user) { %>
                        <button type="button" style="background-color: rgba(14, 19, 31, 0.078); color: white; border: none;"
                            id="signOut" onclick="SignOut()" enabled>Sign Out
                        </button>
                    <% } else { %>
                        <button type="button" style="background-color: rgba(14, 19, 31, 0.078); color: white; border: none;"
                            id="signIn" onclick="SignIn()">Sign In
                        </button>
                    <% } %>
                </form>
            </div>
        </nav><br>
        <div id="data-container" style="display: flex;flex-direction:column; justify-content: center; border: solid black .2em;padding:1em; background-color: white; color: black; border-radius: 1em; height: auto; width: 75%; position:relative; left:10em;">
            <table id="data-table" style="border: 0.01em solid grey; color: black;">
                <thead style="border: 0.01em solid black;">
                    <nav style="display:flex; justify-content: space-around;flex-direction: row; height: auto; width: auto;">
                        <h1>Smart Bells</h1>
                        <div style="display: flex; flex-direction: row; justify-content: center;">
                            
                            <button type="button" id="emergencySirenButton" style="background-color: grey; margin-left:1em; border-radius: 1em; height: 2em; width:9em; border:none;" onclick="toggleValToOne()">Emergency Siren</button>
                        </div>
                    </nav>
                    <tr>
                        <th>Date</th>
                        <th>Day</th>
                        <th>Time</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody style="border: 0.01em solid grey; text-align:center"></tbody>
            </table>
        </div>
        <br>
        

        <div id="data-container" style="display: flex;flex-direction:column; justify-content: center; border: solid black .2em;padding:1em; background-color: white; color: black; border-radius: 1em; height: auto; width: 75%; position:relative; left:10em;">
            <table id="data-table2" class="specialEvent" style="border: 0.01em solid grey; color: black;">
                <thead style="border: 0.01em solid black;">
                    <nav style="display:flex; justify-content: space-around;flex-direction: row; height: auto; width: auto;">
                        <h1>Special Events</h1>
                        <div style="display: flex; flex-direction: row; justify-content: center;">
                            <button type="button" style="background-color: blue; border-radius: 1em; height: 2em; width:7em; border:none;" onclick="AddEventPage()">Add Events</button>
                        </div>
                    </nav>
                    <tr>
                        <th>Event Name</th>
                        <th>Date</th>
                        <th>Start Time</th>
                        <th>End Time</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody style="border: 0.01em solid grey; text-align:center"></tbody>
            </table>
        </div>
    `;


            // Emergency Siren Button logic

            async function fetchData() {
                try {
                    console.log("Fetching data");

                    // Fetch Bell and Event data concurrently
                    const [bellResponse, eventResponse] = await Promise.all([
                        fetch('/api/Bell_data'),
                        fetch('/api/Event_data')
                    ]);

                    // Parse the JSON responses
                    const bellData = await bellResponse.json();
                    const eventData = await eventResponse.json();

                    console.log("Fetched Bell Data:", bellData);
                    console.log("Fetched Event Data:", eventData);

                    // Display both data sets
                    displayData(bellData, eventData);
                } catch (error) {
                    console.error('Error fetching data:', error);
                }
            }



            function displayData(bell_data, event_data) {
                const tableBody = document.querySelector('#data-table tbody');
                tableBody.innerHTML = '';

                function getNextDayOfWeek(dayOfWeek) {
                    const today = new Date();
                    const resultDate = new Date(today);

                    let daysToAdd = (dayOfWeek - today.getDay() + 7) % 7;
                    resultDate.setDate(today.getDate() + daysToAdd);
                    return resultDate;
                }

                function formatDate(date) {
                    const options = { year: 'numeric', month: 'short', day: 'numeric' };
                    return date.toLocaleDateString('en-US', options);
                }

                function isBellTimePassed(bellTimes) {
                    const now = new Date();
                    return bellTimes.every(time => {
                        const [hours, minutes] = time.split(':').map(Number);
                        const bellTime = new Date();
                        bellTime.setHours(hours);
                        bellTime.setMinutes(minutes);
                        bellTime.setSeconds(0);
                        return now > bellTime;
                    });
                }

                bell_data.forEach((item, index) => {
                    const row = document.createElement('tr');
                    row.id = `row-${index}`;

                    const bellDateCell = document.createElement('td');
                    const bellFrequencyCell = document.createElement('td');
                    const bellTimeCell = document.createElement('td');
                    bellTimeCell.id = `bellTimeCell-${index}`;
                    bellTimeCell.style.cssText = "border: 0.01em solid #000; border-radius: 0.5em; display: flex; flex-wrap: wrap; min-height: 40px; max-height: 100px; overflow-y: auto;";
                    const actionsCell = document.createElement('td');

                    const daysOfWeek = {
                        'Sunday': 0,
                        'Monday': 1,
                        'Tuesday': 2,
                        'Wednesday': 3,
                        'Thursday': 4,
                        'Friday': 5,
                        'Saturday': 6
                    };
                    const currentDayOfWeek = daysOfWeek[item.bell_Frequency];
                    const today = new Date();
                    const todayDayOfWeek = today.getDay();
                    const nextDate = getNextDayOfWeek(currentDayOfWeek);

                    const bellTimeArray = Array.isArray(item.bell_Time) ? item.bell_Time : [String(item.bell_Time)];

                    if (todayDayOfWeek === currentDayOfWeek) {
                        if (isBellTimePassed(bellTimeArray)) {
                            bellDateCell.textContent = formatDate(nextDate);
                        } else {
                            bellDateCell.textContent = formatDate(today);
                        }
                    } else {
                        bellDateCell.textContent = formatDate(nextDate);
                    }

                    bellFrequencyCell.textContent = item.bell_Frequency;
                    bellFrequencyCell.contentEditable = false;

                    // Initially render time values as plain text
                    bellTimeArray.forEach(time => {
                        const timeBox = document.createElement('div');
                        timeBox.textContent = time.trim();
                        timeBox.style.cssText = "margin: 2px; padding: 5px; border: 1px solid black; border-radius: 3px; background-color: grey; color: black;";
                        bellTimeCell.appendChild(timeBox);
                    });

                    const editButton = document.createElement('button');
                    editButton.textContent = 'Edit';
                    editButton.style.backgroundColor = '#4CAF50';
                    editButton.style.color = 'white';
                    editButton.style.border = 'none';
                    editButton.style.borderRadius = '5px';
                    editButton.style.padding = '5px 10px';
                    editButton.style.marginRight = '5px';
                    editButton.style.cursor = 'pointer';
                    editButton.onmouseenter = () => editButton.style.backgroundColor = '#45a049';
                    editButton.onmouseleave = () => editButton.style.backgroundColor = '#4CAF50';
                    editButton.onclick = () => toggleEditSave(editButton, `row-${index}`, item._id);


                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Clear';
                    deleteButton.classList.add('clear-button');
                    deleteButton.setAttribute('data-row-id', `row-${index}`);
                    deleteButton.style.backgroundColor = '#f44336';
                    deleteButton.style.color = 'white';
                    deleteButton.style.border = 'none';
                    deleteButton.style.borderRadius = '5px';
                    deleteButton.style.padding = '5px 10px';
                    deleteButton.style.cursor = 'pointer';
                    deleteButton.onmouseenter = () => deleteButton.style.backgroundColor = '#da190b';
                    deleteButton.onmouseleave = () => deleteButton.style.backgroundColor = '#f44336';

                    actionsCell.appendChild(editButton);
                    actionsCell.appendChild(deleteButton);

                    row.appendChild(bellDateCell);
                    row.appendChild(bellFrequencyCell);
                    row.appendChild(bellTimeCell);
                    row.appendChild(actionsCell);
                    tableBody.appendChild(row);


                });


                // Toggle Edit/Save functionality
                // function toggleEditSave(button, index) {
                //     const row = document.querySelector(`#row-${index}`);
                //     const bellTimeCell = row.querySelector(`#bellTimeCell-${index}`);

                //     if (button.textContent === 'Edit') {
                //         button.textContent = 'Save';

                //         // Replace text times with input elements
                //         const timeBoxes = bellTimeCell.querySelectorAll('div');
                //         timeBoxes.forEach(box => {
                //             const timeValue = box.textContent.trim();
                //             const timeInput = document.createElement('input');
                //             timeInput.type = 'time';
                //             timeInput.value = timeValue;
                //             timeInput.style.margin = '2px';
                //             timeInput.style.padding = '5px';
                //             timeInput.style.border = '1px solid black';
                //             timeInput.style.borderRadius = '3px';
                //             bellTimeCell.replaceChild(timeInput, box);
                //         });

                //         // Add a new input field for additional times
                //         const newTimeInput = document.createElement('input');
                //         newTimeInput.type = 'time';
                //         newTimeInput.placeholder = 'Add time...';
                //         newTimeInput.style.margin = '2px';
                //         newTimeInput.style.padding = '5px';
                //         newTimeInput.style.border = '1px solid black';
                //         newTimeInput.style.borderRadius = '3px';
                //         bellTimeCell.appendChild(newTimeInput);
                //     } else {
                //         button.textContent = 'Edit';

                //         // Replace input elements with text times
                //         const timeInputs = bellTimeCell.querySelectorAll('input[type="time"]');
                //         timeInputs.forEach(input => {
                //             const timeValue = input.value;
                //             const timeBox = document.createElement('div');
                //             timeBox.textContent = timeValue;
                //             timeBox.style.cssText = "margin: 2px; padding: 5px; border: 1px solid black; border-radius: 3px; background-color: grey; color: black;";
                //             bellTimeCell.replaceChild(timeBox, input);
                //         });
                //     }
                // }

                // Event listeners for Clear buttons
                document.querySelectorAll('.clear-button').forEach(button => {
                    button.addEventListener('click', (event) => {
                        const rowId = event.target.getAttribute('data-row-id');
                        const row = document.querySelector(`#${rowId}`);
                        if (row) {
                            const timeCell = row.querySelector('td:nth-child(3)');
                            if (timeCell) {
                                const timeBoxes = timeCell.querySelectorAll('div'); // Select all time boxes
                                timeBoxes.forEach(box => box.remove()); // Remove each time box
                            }
                        }
                    });
                });

                // Table manipulation for events (repeat similar steps if necessary)
                const tableBody2 = document.querySelector('#data-table2 tbody');
                tableBody2.innerHTML = '';

                // Ensure event_data is an array
                if (Array.isArray(event_data)) {
                    event_data.forEach((item, index) => {
                        const row = document.createElement('tr');
                        row.id = `row2-${index}`;

                        const eventNameCell = document.createElement('td');
                        const eventDateCell = document.createElement('td');
                        const eventStartTimeCell = document.createElement('td');
                        const eventEndTimeCell = document.createElement('td');
                        const actionsCell = document.createElement('td');

                        eventNameCell.textContent = item.event_Name;
                        eventDateCell.textContent = item.bell_Date;
                        eventStartTimeCell.textContent = item.bell_StartTime;
                        eventEndTimeCell.textContent = item.bell_EndTime;

                        const editButton = document.createElement('button');
                        editButton.textContent = 'Edit';
                        editButton.style.backgroundColor = '#4CAF50';
                        editButton.style.color = 'white';
                        editButton.style.border = 'none';
                        editButton.style.borderRadius = '5px';
                        editButton.style.padding = '5px 10px';
                        editButton.style.marginRight = '5px';
                        editButton.style.cursor = 'pointer';
                        editButton.onmouseenter = () => editButton.style.backgroundColor = '#45a049';
                        editButton.onmouseleave = () => editButton.style.backgroundColor = '#4CAF50';
                        editButton.onclick = () => toggleEditSave(editButton, `row2-${index}`, item._id);

                        const deleteButton = document.createElement('button');
                        deleteButton.textContent = 'Delete';
                        deleteButton.classList.add('delete-button');
                        deleteButton.style.backgroundColor = '#f44336';
                        deleteButton.style.color = 'white';
                        deleteButton.style.border = 'none';
                        deleteButton.style.borderRadius = '5px';
                        deleteButton.style.padding = '5px 10px';
                        deleteButton.style.cursor = 'pointer';
                        deleteButton.onmouseenter = () => deleteButton.style.backgroundColor = '#da190b';
                        deleteButton.onmouseleave = () => deleteButton.style.backgroundColor = '#f44336';

                        deleteButton.onclick = async () => {
                            try {
                                await deleteBell(item._id);
                                document.getElementById(`row2-${index}`)?.remove();
                            } catch (error) {
                                console.error('Error deleting bell:', error);
                            }
                        };

                        actionsCell.appendChild(editButton);
                        actionsCell.appendChild(deleteButton);

                        row.appendChild(eventNameCell);
                        row.appendChild(eventDateCell);
                        row.appendChild(eventStartTimeCell);
                        row.appendChild(eventEndTimeCell);
                        row.appendChild(actionsCell);
                        tableBody2.appendChild(row);
                    });
                } else {
                    console.error("event_data is not an array:", event_data);
                }


                //     document.querySelectorAll('.clear-button').forEach(button => {
                //         button.addEventListener('click', (event) => {
                //             const rowId = event.target.getAttribute('data-row-id');
                //             const row = document.querySelector(`#${rowId}`);
                //             if (row) {
                //                 const timeCell = row.querySelector('td:nth-child(3)');
                //                 if (timeCell) {
                //                     const timeBoxes = timeCell.querySelectorAll('div');
                //                     timeBoxes.forEach(box => box.remove());
                //                 }
                //             }
                //         });
                //     });
            }


            function toggleEditSave(button, rowId, id) {
                const row = document.getElementById(rowId);
                if (!row) {
                    console.error(`Row with ID ${rowId} not found.`);
                    return;
                }

                const isEditing = button.textContent === 'Save';
                const cells = row.querySelectorAll('td');
                const timeCell = cells[2];

                if (isEditing) {
                    // Convert all time inputs to text boxes
                    const timeInputs = timeCell.querySelectorAll('input[type="time"]');
                    const updatedTimes = [];

                    timeInputs.forEach(input => {
                        const timeValue = input.value.trim();
                        if (timeValue) {
                            updatedTimes.push(timeValue);
                            const timeBox = document.createElement('div');
                            timeBox.textContent = timeValue;
                            timeBox.style.cssText = "margin: 2px; padding: 5px; border: 1px solid black; border-radius: 3px; background-color: grey; color: black;";
                            timeCell.replaceChild(timeBox, input);
                        } else {
                            timeCell.removeChild(input); // Remove empty inputs
                        }
                    });

                    // Save to database
                    const updatedBell = {
                        bell_Name: cells[0].textContent.trim(),
                        bell_Frequency: cells[1].textContent.trim(),
                        bell_Time: updatedTimes
                    };

                    saveBell(id, updatedBell);

                    button.textContent = 'Edit';
                    button.style.backgroundColor = '#4CAF50';
                } else {
                    button.textContent = 'Save';
                    button.style.backgroundColor = '#008CBA';

                    // Convert text divs to editable time inputs
                    const timeBoxes = Array.from(timeCell.querySelectorAll('div'));
                    timeBoxes.forEach(box => {
                        const timeValue = box.textContent.trim();
                        const timeInput = document.createElement('input');
                        timeInput.type = 'time';
                        timeInput.value = timeValue;
                        timeInput.style.margin = '2px';
                        timeInput.style.padding = '5px';
                        timeInput.style.border = '1px solid black';
                        timeInput.style.borderRadius = '3px';
                        timeCell.replaceChild(timeInput, box);
                    });

                    // Add an empty time input for adding new time
                    const newTimeInput = document.createElement('input');
                    newTimeInput.type = 'time';
                    newTimeInput.placeholder = 'Add time...';
                    newTimeInput.style.margin = '2px';
                    newTimeInput.style.padding = '5px';
                    newTimeInput.style.border = '1px solid black';
                    newTimeInput.style.borderRadius = '3px';
                    timeCell.appendChild(newTimeInput);
                }
            }


            async function saveBell(id, updatedBell) {
                try {
                    const response = await fetch(`/api/Bell_data/${id}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(updatedBell)
                    });
                    const result = await response.json();
                    console.log("Saved bell:", result);
                    fetchData(); // Refresh the data after saving
                } catch (error) {
                    console.error('Error saving bell:', error);
                }
            }

            async function deleteBell(id) {
                try {
                    const response = await fetch(`/api/Event_data/${id}`, { method: 'DELETE' });
                    const result = await response.json();
                    console.log("Deleted bell:", result);
                    fetchData();
                } catch (error) {
                    console.error('Error deleting bell:', error);
                }
            }

            async function clearTimeCell(rowId) {
                try {
                    const row = document.querySelector(`#row-${rowId}`);
                    if (row) {
                        const timeCell = row.querySelector('td:nth-child(3)'); // Assuming time cell is the 3rd cell
                        if (timeCell) {
                            timeCell.innerHTML = ''; // Clear the content of the time cell
                        }
                    }
                } catch (error) {
                    console.error('Error clearing time cell:', error);
                }
            }

            // Add an event listener to your "Clear" button to call clearTimeCell function
            document.querySelectorAll('.clear-button').forEach(button => {
                button.addEventListener('click', (event) => {
                    const rowId = event.target.getAttribute('data-row-id');
                    clearTimeCell(rowId);
                });
            });

            async function deleteEvent(id) {
                try {
                    const response = await fetch(`/api/Bell_data/${id}`, { method: 'DELETE' });
                    const result = await response.json();
                    console.log("Deleted bell:", result);
                    fetchData();
                } catch (error) {
                    console.error('Error deleting bell:', error);
                }
            }

            fetchData();
            // fetchData("bell");
        }


        function showNotification() {
            let elemMain = document.getElementById("main");
            elemMain.style.height = "98vh"
            elemMain.innerHTML = '<h1>Smart Notification</h1> <div id="data-container"> <table id="data-table" style="border : solid white 2px;"> <thead style="border : solid white 2px;"> <tr> <th> S.No. </th> <th>Notifications</th> <th>Date</th>  <th>Time</th>  </tr> </thead> <tbody style="border : solid white 2px;">  </tbody> </table> </div>';

            async function fetchData() {
                try {
                    const response = await fetch(`/api/data`);
                    const data = await response.json();
                    displayData(data);
                } catch (error) { console.error('Error fetching data:', error); }
            }

            function displayData(data) {
                const tableBody = document.querySelector('#data-table tbody');
                tableBody.innerHTML = '';
                forEach(item => {
                    const row = document.createElement('tr');
                    const S_No = document.createElement('td');
                    const Notification = document.createElement('td');
                    const Date = document.createElement('td');
                    const Time = document.createElement('td');

                    S_No.textContent = item.S_No;
                    Notification.textContent = item.Notification;
                    Date.textContent = item.Date;
                    Time.textContent = item.Time;

                    row.appendChild(S_No);
                    row.appendChild(Notification);
                    row.appendChild(Date);
                    row.appendChild(Time);
                    tableBody.appendChild(row);
                });
            }
            fetchData();

        }

        function AddBellPage() {
            window.location.href = '/addBell';
        }

        function AddEventPage() {
            window.location.href = '/addEvent';
        }

        function showIrrigation() {
            injectCSS("Irrigation.css");
            const elemMain = document.getElementById("main");

            elemMain.innerHTML = `
    <div class="container">
      <main>
        <header class="header">
          <h1>Pages / Irrigation</h1>
          <div class="header-inputs">
            <input type="text" placeholder="Type here..." class="header-search">
            <button class="header-signout-btn">Sign Out</button>
          </div>
        </header>

        <section class="content">
          <div class="card pie-chart">
            <h2>NPK Distribution</h2>
            <canvas id="pieChart"></canvas>
          </div>

          <div class="card-group">
            <div class="card status-card" style="justify-content: right; width: 9em !important; align-items: flex-start;">
              <h3>Pump Status</h3>
              <label class="switch">
                <input type="checkbox">
                <span class="slider" style="height: 4em; width: 7em;"></span>
              </label>
            </div>
            <div class="card moisture-card" sytle="width: 9em !important;">
              <h3 class="mst-lvl">Moisture Level</h3>
              <svg id="moistureGauge" width="120" height="90" viewBox="0 0 100 50">
                <path d="M 10 50 A 40 40 0 0 1 90 50" stroke="#e0e0e0" stroke-width="10" fill="none"></path>
                <path id="moistureLevel" d="M 10 50 A 40 40 0 0 1 90 50" stroke="#0000FF" stroke-width="10" fill="none" stroke-dasharray="126.92" stroke-dashoffset="126.92"></path>
                <text id="moistureText" x="50" y="45" text-anchor="middle" font-size="12" fill="#000">0%</text>
              </svg>
              <div style="display:flex;justify-content:space-between;">
              <div class="moisture-label left" >0%</div>
              <div class="moisture-label right" >100%</div>
              </div>
            </div>
            <div class="card status-card" style=" align-items:center; width: 16em !important; height: 11em !important;">
              <h3>PH Level</h3>
           
              
                <div class="ph-level">
                  <div class="ph-level-bar" style="width: 45%;"><span class="value" id="PH_value" style="text-align:center;">45.00</span></div>
                </div>

            </div>
          </div>

          <div class="card temperature-humidity-card">
            <h3>Temperature and Humidity</h3>
            <canvas id="tempHumidityChart"></canvas>
          </div>

          <div class="card map-card">
            <h3>Location</h3>
            <div id="map" style="width: 100%; height: 400px;"></div>
          </div>

          <div class="card details" style="height:fit-content;width:auto;">
            <h2>Details</h2>
            <ul>
              <li>Moisture Level: <span class="value">Loading...</span></li>
              <li>Soil Temperature: <span class="value">Loading...</span></li>
              <li>Nitrogen (N): <span class="value">Loading...</span></li>
              <li>Phosphorus (P): <span class="value">Loading...</span></li>
              <li>Potassium (K): <span class="value">Loading...</span></li>
            </ul>
          </div>

          <div class="card table" id="prevData">
            <h2>Previous Data</h2>
            <table>
              <thead>
                <tr>
                  <th>Pump Status</th>
                  <th>Date</th>
                  <th>Time</th>
                  <th>PH Level</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td colspan="4">Loading data...</td>
                </tr>
              </tbody>
            </table>
          </div>
        </section>
      </main>
    </div>
  `;

            // Initialize after DOM updates
            setTimeout(() => {
                initializeChart();
                initializeTempHumidityChart();
                initializeMap();
                fetchData();
            }, 0);
        }

        function initializeChart() {
            const canvas = document.getElementById("pieChart");
            if (!canvas) {
                console.error("Canvas element not found. Ensure the 'pieChart' element exists in the DOM.");
                return;
            }

            const ctx = canvas.getContext("2d");

            if (window.myChartInstance) {
                window.myChartInstance.destroy();
            }

            const defaultData = [50, 20, 30];
            window.myChartInstance = createPieChart(ctx, defaultData);
        }

        function createPieChart(ctx, data) {
            return new Chart(ctx, {
                type: "pie",
                data: {
                    labels: ["Nitrogen (N)", "Phosphorus (P)", "Potassium (K)"],
                    datasets: [
                        {
                            data: data,
                            backgroundColor: ["#6a9eff", "#a379f9", "#ffc36d"],
                        },
                    ],
                },
                options: { responsive: true },
            });
        }

        function initializeTempHumidityChart() {
            const canvas = document.getElementById("tempHumidityChart");
            if (!canvas) {
                console.error("Canvas element not found. Ensure the 'tempHumidityChart' element exists in the DOM.");
                return;
            }

            const ctx = canvas.getContext("2d");

            if (window.tempHumidityChartInstance) {
                window.tempHumidityChartInstance.destroy();
            }

            window.tempHumidityChartInstance = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: [], // Labels will be updated dynamically
                    datasets: [
                        {
                            label: 'Temperature (°C)',
                            data: [],
                            borderColor: '#ff6384',
                            backgroundColor: 'rgba(255,99,132,0.2)',
                            yAxisID: 'y',
                            tension: 0.4,
                        },
                        {
                            label: 'Humidity (%)',
                            data: [],
                            borderColor: '#36a2eb',
                            backgroundColor: 'rgba(54,162,235,0.2)',
                            yAxisID: 'y1',
                            tension: 0.4,
                        },
                    ],
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Time',
                            },
                            ticks: {
                                maxRotation: 90,
                                minRotation: 45,
                                autoSkip: true,
                                maxTicksLimit: 10,
                            },
                        },
                        y: {
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Temperature (°C)',
                            },
                        },
                        y1: {
                            position: 'right',
                            grid: {
                                drawOnChartArea: false,
                            },
                            title: {
                                display: true,
                                text: 'Humidity (%)',
                            },
                        },
                    },
                    plugins: {
                        tooltip: {
                            mode: 'index',
                            intersect: false,
                        },
                        legend: {
                            display: true,
                        },
                    },
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                },
            });
        }


        function formatTimestamp(timestamp) {
            const date = new Date(timestamp);
            const hours = date.getHours().toString().padStart(2, '0'); // Ensure two digits
            const minutes = date.getMinutes().toString().padStart(2, '0'); // Ensure two digits
            return `${hours}:${minutes}`; // Returns time in HH:mm format
        }


        async function fetchData() {
            try {
                const response = await fetch("/api/NPK_data");

                if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);

                let responseData = await response.json();
                console.log("Fetched data:", responseData);

                // Check if responseData is an object with a data property containing the array
                const dataArray = Array.isArray(responseData) ? responseData : responseData.data;

                if (!Array.isArray(dataArray) || dataArray.length === 0) {
                    console.error("No data found or data is not an array");
                    updateUI(null);
                    return;
                }

                const labels = [];
                const temperatureData = [];
                const humidityData = [];

                dataArray.forEach((entry) => {
                    // Format timestamp
                    const timestamp = entry.timestamp || entry.time || entry.date_time;
                    const formattedTime = formatTimestamp(timestamp);
                    labels.push(formattedTime);

                    // Collect temperature and humidity data
                    temperatureData.push(entry.soilTemperature || entry.temperature || 0);
                    humidityData.push(entry.humidity || entry.moistureLevel || 0);
                });

                // Use the last entry for updating other UI elements
                const latestEntry = dataArray[dataArray.length - 1];

                const normalizedData = {
                    N_value: latestEntry.N_Val || latestEntry.n_value || latestEntry.nitrogen,
                    P_value: latestEntry.P_Val || latestEntry.p_value || latestEntry.phosphorus,
                    K_value: latestEntry.K_Val || latestEntry.k_value || latestEntry.potassium,
                    moistureLevel: latestEntry.moistureLevel || latestEntry.moisture || 0,
                    soilTemperature: latestEntry.soilTemperature || latestEntry.temperature || 0,
                    phVal: latestEntry.PH_Level || latestEntry.PH_level || latestEntry.ph_level || 0,
                    labels,
                    temperatureData,
                    humidityData,
                };

                updateUI(normalizedData);
            } catch (error) {
                console.error("Error fetching data:", error);
                updateUI(null);
            }
        }



        function updateUI(data) {
            if (!data) {
                document.querySelector(".details ul").innerHTML = `
            <li>Error loading data. Please try again later.</li>
        `;
                return;
            }

            // Update NPK Pie Chart
            if (window.myChartInstance) {
                window.myChartInstance.data.datasets[0].data = [
                    data.N_value,
                    data.P_value,
                    data.K_value,
                ];
                window.myChartInstance.update();
            }

            // Update Temperature and Humidity Chart
            if (window.tempHumidityChartInstance) {
                window.tempHumidityChartInstance.data.labels = data.labels;
                window.tempHumidityChartInstance.data.datasets[0].data = data.temperatureData;
                window.tempHumidityChartInstance.data.datasets[1].data = data.humidityData;
                window.tempHumidityChartInstance.update();
            }

            // Update Moisture Gauge
            const moistureLevelPath = document.getElementById('moistureLevel');
            const moistureText = document.getElementById('moistureText');
            const percentage = data.moistureLevel;

            const dashOffset = 126.92 - (126.92 * (percentage / 100));
            moistureLevelPath.style.strokeDashoffset = dashOffset;
            moistureText.textContent = `${percentage}%`;

            // Update Details Section
            const detailsContainer = document.querySelector(".details ul");
            detailsContainer.innerHTML = `
        <li>Moisture Level: <span class="value">${data.moistureLevel}</span></li>
        <li>Soil Temperature: <span class="value">${data.soilTemperature}</span></li>
        <li>Nitrogen (N): <span class="value">${data.N_value}</span></li>
        <li>Phosphorus (P): <span class="value">${data.P_value}</span></li>
        <li>Potassium (K): <span class="value">${data.K_value}</span></li>
    `;

            // Update PH Value
            const phVal = document.querySelector("#PH_value");
            phVal.textContent = data.phVal;
            const phLevel = document.querySelector(".ph-level");

            if (phVal.textContent < 7) {
                phLevel.style.backgroundColor = "red";
            }
            else if (phVal.textContent > 7) {
                phLevel.style.backgroundColor = "blue";
            }

            // Update Previous Data Table   
            const tableBody = document.querySelector("#prevData tbody");
            tableBody.innerHTML = "";
            data.labels.forEach((label, index) => {
                const row = document.createElement("tr");
                const pumpStatusCell = document.createElement("td");
                const dateCell = document.createElement("td");
                const timeCell = document.createElement("td");
                const phLevelCell = document.createElement("td");

                pumpStatusCell.textContent = "On";
                dateCell.textContent = label;
                timeCell.textContent = data.temperatureData[index];
                phLevelCell.textContent = data.phVal;

                row.appendChild(pumpStatusCell);
                row.appendChild(dateCell);
                row.appendChild(timeCell);
                row.appendChild(phLevelCell);
                tableBody.appendChild(row);
            });
        }


        function initializeMap() {
            const mapElement = document.getElementById('map');
            if (!mapElement) {
                console.error("Map element not found.");
                return;
            }

            // Initialize the map at a default location
            window.mapInstance = L.map('map').setView([51.505, -0.09], 13);

            // Add the tile layer (using OpenStreetMap tiles)
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(window.mapInstance);

            // Add a marker at the default location
            window.marker = L.marker([51.505, -0.09]).addTo(window.mapInstance);
        }

        function injectCSS(href) {
            const existingLink = document.querySelector(`link[href="${href}"]`);
            if (!existingLink) {
                const link = document.createElement("link");
                link.rel = "stylesheet";
                link.href = href;
                document.querySelector("head").appendChild(link);
            }
        }

        async function toggleValToOne() {
            try {
                // Set bell status to 1
                let response = await fetch('/api/Bell_data/status?status=1', {
                    method: 'GET'
                });
                if (!response.ok) throw new Error('Failed to set status to 1');
                console.log('Bell status set to 1');

                // Wait for 5 seconds
                setTimeout(async () => {
                    try {
                        // Revert bell status to 0
                        response = await fetch('/api/Bell_data/status?status=0', {
                            method: 'GET'
                        });
                        if (!response.ok) throw new Error('Failed to revert status to 0');
                        console.log('Bell status reverted to 0');
                    } catch (error) {
                        console.error('Error reverting bell status:', error);
                    }
                }, 5000);

            } catch (error) {
                console.error('Error setting bell status:', error);
            }
        }

    </script>
</body>

</html>